# üìò Claude AI Backend Instructions

Project: SaaS Multi-Tenant Church Management System (NestJS)  
Goal: Backend built in small, testable, multi-tenant-aware chunks

---

## üîÅ Development Approach (Step-by-Step)

1. One Chunk at a Time
   - Break the backend into small, understandable chunks.
   - Each chunk must include:
     1. Concept Explanation
     2. Confirmation Before Code
     3. Code Implementation (dev/stage/prod config as needed)
     4. Clear Testing Instructions
     5. Fix Any Issues First Before Moving On

2. Beginner-Friendly Guidance
   - Every step must be explained in simple terms using best practices.

3. No Skipping Ahead
   - Do not provide future chunks or code until current chunk is complete and tested.

---

## üß± General Development Principles

1. Strictly Avoid `public` Schema
   - Never use PostgreSQL `public` schema.
   - Always use per-tenant schemas based on tenant ID or slug.

2. Ask Before Acting
   - If unsure about existing logic, ask or consult GitHub/documentation before implementing.

3. Security First
   - Validate inputs
   - Prevent SQL injection
   - Protect secrets
   - Sanitize outputs
   - Hide internal errors from users

4. Stay Focused
   - Stick to the current task.
   - Do not mix multiple threads or go off-track unless explicitly instructed.

5. Multi-Tenant Aware
   - All logic must support schema-based tenancy.
   - Never assume single-tenant access or static schemas.

---

## üß™ Environment-Specific Code Support

6. Write for All Environments
   - Every feature must support:
     - development
     - staging
     - production
   - Provide copyable `.env` or config files for each.

---

## üß≠ API Standards

7. Consistent API Paths
   - All routes must start with `/api`
     - Example: `/api/users`, `/api/v1/auth/login`

8. Swagger Required
   - Swagger must be kept in sync with all request/response fields.
   - Required for every API route.

---

## üß© Database Configuration Rules

9. Respect Existing DB Config
   - Never change DB setup directly.
   - First present a DB plan for approval.
   - Only proceed after approval.

---

## üßæ Logging and Error Handling

10. Meaningful Logging
    - Use standard logging library.
    - Include: tenant ID, user ID, action name.
    - Do not log passwords or secrets.

11. Consistent Error Responses
    - Handle exceptions cleanly.
    - Send user-friendly messages.
    - Never expose raw stack traces or system errors to users.

---

## üßº Code Quality & Maintenance

12. Follow Best Practices
    - Clean, modular, and readable NestJS code
    - Reuse services, DTOs, guards, and utilities
    - Keep logic testable and well-documented

13. Minimal Diffs in Existing Files
    - Don‚Äôt rewrite whole files.
    - Show only:
      - File path
      - Exact modifications

---

## üìÑ .md Files Configuration

README.md:
1. Provide only a high-level overview.
2. Include information about the application.
3. Show the file structure.
4. Do not include any setup instructions or references to DB_SETUP.md, APP_SETUP.md, or APP_FLOW.md.
5. Do not include any core endpoints‚Äîrefer to Swagger for endpoint documentation.

DB_SETUP.md:
1. Give a high-level overview of the database configuration.
2. Include only instructions for setting up the database in a local environment.
3. Do not include any other setup instructions.

APP_SETUP.md:
1. Give a high-level overview of the application setup configuration.
2. Include only instructions for setting up the application in a local environment.
3. Do not include app flow or database setup instructions.

APP_FLOW.md:
1. Provide a high-level overview of the application flow.
2. Reference only the API paths.
3. Do not include any request body or response details.

---