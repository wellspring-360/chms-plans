Full Flow for Multi-Tenant System with Authentication

CURRENT IMPLEMENTATION STATUS: ✅ FULLY FUNCTIONAL

=================================================================
1. Tenant Creation with Admin User (IMPLEMENTED ✅)
=================================================================

Flow:
    1. Admin/Church representative visits registration page
    2. They fill out tenant details with structured address:
       - Church name
       - Complete address (address_line1, address_line2, city, state, postal_code, country)
       - Optional: currency code, timezone, logo URL
    3. They provide admin user details (name, email, phone, password)
    4. System validates structured address format based on country
    5. System validates phone number format and country matching
    6. System auto-detects currency and timezone from country if not provided
    7. System creates tenant and TenantAdminUser in single transaction
    8. System generates unique 6-digit church ID and URL-friendly slug
    9. System creates dedicated database schema with hyphen support
    10. System uploads logo to S3 if provided (local file or URL)
    11. System sends professional verification email to TenantAdminUser
    12. TenantAdminUser verifies email (required for tenant admin access)
    13. TenantAdminUser can now log in with full permissions

API Endpoint:

POST /api/auth/register-tenant
Body: {
  "tenant": {
    "churchName": "Example Church",
    "countryCode": "US",
    "address": "123 Church Street, Springfield, IL 62701",
    "pincode": "62701",
    "logoUrl": "https://example.com/logo.png"

  },
  "tenantAdminUser": {
    "firstName": "Admin",
    "lastName": "User",
    "email": "admin@example.com",
    "password": "securePassword123",
    "phone": "+1234567890"  // Must be unique across all tenants
  }
}

2. User Login Flow

  Flow:
    1. User visits the login page
    2. User enters email and password
    3. System finds tenant associated with the email
    4. System validates credentials for that tenant
    5. If valid, system creates JWT tokens with tenant and user information
    6. System returns tokens and tenant information to client
    7. Client redirects to tenant-specific dashboard

API Endpoint:

POST /api/auth/login
Body: {
  "email": "admin@example.com",
  "password": "securePassword123"
}

Response: {
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "tenant": {
    "id": "uuid-here",
    "slug": "example-church_123456",
    "churchName": "Example Church"
  },
  "user": {
    "id": "uuid-here",
    "firstName": "Admin",
    "lastName": "User",
    "email": "admin@example.com",
    "role": "tenantadmin",  // First user is always tenantadmin
    "userId": "USR123456"  // Unique across all tenants
  }
}

3. TenantAdminUser Creates New Users (Only TenantAdminUser can create users)

  Flow:
    1. TenantAdminUser logs in using flow #2
    2. TenantAdminUser navigates to user management section
    3. TenantAdminUser fills out new user details (name, email, role, etc.)
    4. System creates user associated with admin's tenant
    5. System sends invitation/verification email to new user
    6. New user can set password and log in

API Endpoint:

POST /api/users
Headers: {
  "Authorization": "Bearer {accessToken}"
}
Body: {
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "phone": "+1987654321",
  "role": "pastor",
  "sendInvitation": true
}

Response: {
  "id": "uuid-here",
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "phone": "+1987654321",
  "userId": "USR789012",  // System-generated unique ID
  "role": "pastor",
  "invitationSent": true
}